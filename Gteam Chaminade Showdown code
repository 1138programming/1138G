#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, I2C_1,  leftRearEnc,    sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_2,  leftFrontEnc,   sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_3,  rightFrontEnc,  sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_4,  rightRearEnc,   sensorNone)
#pragma config(Motor,  port1,           clawMotor,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           rightFrontMotor, tmotorVex393_MC29, openLoop, encoderPort, I2C_1)
#pragma config(Motor,  port3,           leftFrontMotor, tmotorVex393_MC29, openLoop, encoderPort, I2C_2)
#pragma config(Motor,  port4,           rightRear2,    tmotorNone, openLoop)
#pragma config(Motor,  port5,           leftRear2,     tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_3)
#pragma config(Motor,  port6,           leftMobileMotor, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           leftLiftMotor, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           rightLiftMotor, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           rightMobileMotor, tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

#pragma autonomousDuration(0)
#pragma userControlDuration(60)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

//#define recordIndefinitely
//#include "autonRecorder.c"
/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
int motorValue=100;
void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

void liftUp()
{
	motor[rightLiftMotor] = 100;
	motor[leftLiftMotor] = 100;
}
void stopLift()
{
	motor[rightLiftMotor] = 0;
	motor[leftLiftMotor] = 0;
}
void liftDown()
{
	motor[rightLiftMotor] = -100;
	motor[leftLiftMotor] = -100;
}
void driveForward()
{
	motor[rightRear2] = 127;
	motor[rightFrontMotor] = 127;
	motor[leftFrontMotor] = 127;
	motor[leftRear2] = 127;
}
void driveBackward()
{
	motor[rightRear2] = -127;
	motor[rightFrontMotor] = -127;
	motor[leftFrontMotor] = -127;
	motor[leftRear2] = -127;
}
void stopDrive()
{
	motor[rightRear2] = 0;
	motor[rightFrontMotor] = 0;
	motor[leftFrontMotor] = 0;
	motor[leftRear2] = 0;
}
void turnLeft()
{
	motor[rightRear2] = 80;
	motor[rightFrontMotor] = 80;
	motor[leftFrontMotor] = -80;
	motor[leftRear2] = -80;
}
void turnRight()
{
	motor[rightRear2] = -80;
	motor[rightFrontMotor] = -80;
	motor[leftFrontMotor] = 80;
	motor[leftRear2] = 80;
}
void openClaw()
{
	motor[clawMotor] = 100;
}
void closeClaw()
{
	motor[clawMotor] = -100;
}
void stopClaw()
{
	motor[clawMotor] = 0;
}

const float fullCycle = 392;
const float fullSpeed = 127;


//Autonomous

task autonomous()
{
	SensorValue[leftFrontEnc] = 0;

	closeClaw();
	liftUp();
	wait1Msec(1500);
	stopLift();
	// (-_-)
while(SensorValue[leftFrontEnc] < 2.9*fullCycle)
{
	if(SensorValue [leftFrontEnc]<SensorValue[rightFrontEnc])
	{
			motor[leftFrontMotor] = motorValue+10;
			motor[leftRear2]=motorValue+10;
			motor[rightFrontMotor]=motorValue;
			motor[rightRear2]=motorValue;
			}
	if(SensorValue [rightFrontEnc]<SensorValue[leftFrontEnc])
	{
			motor[leftFrontMotor] = motorValue;
			motor[leftRear2]=motorValue;
			motor[rightFrontMotor]=motorValue+10;
			motor[rightRear2]=motorValue+10;
			}
	if(SensorValue [leftFrontEnc]== SensorValue[rightFrontEnc])
	{
			motor[leftFrontMotor] = motorValue;
			motor[leftRear2]= motorValue;
			motor[rightFrontMotor]=motorValue;
			motor[rightRear2]=motorValue;
			}
  }
	stopDrive();
	wait1Msec(200);

	liftDown();
	wait1Msec(1000);
	stopLift();

	openClaw();
	wait1Msec(1000);
	stopClaw();

	liftUp();
	wait1Msec(1000);
	stopLift();

	/*closeClaw();
 	liftUp();
 	wait1Msec(1600);
 	stopLift();
 	wait1Msec(200);
 	while(SensorValue[leftFrontEnc] < 0.4*fullCycle)
	{
		turnRight();
	}
	stopDrive();
	wait1Msec(200);
	while(SensorValue[leftFrontEnc] < 3.8*fullCycle)
	{
		driveForward();
	}
	stopDrive();
	wait1Msec(500);
	liftDown();
	wait1Msec(1400);
	stopLift();
	openClaw();
	wait1Msec(1000);
	stopClaw();
	liftUp();
	wait1Msec(750);
	stopLift();
	while(SensorValue[leftFrontEnc] < 0.2*fullCycle)
	{
		turnLeft();
	}
	stopDrive();
	wait1Msec(250);
/*	liftDown();
	wait1Msec(1000);
	stopLift();
	closeClaw();
	wait1Msec(1000);
	liftUp();
	wait1Msec(1000);
	stopLift();
	while(SensorValue[leftFrontEnc] < 0.3*fullCycle)
	{
		turnRight();
	}
	stopDrive();
	wait1Msec(250);*/
}


task usercontrol()
{
  // User control code here, inside the loop
//startTask(autonRecorder);
while (true)
{
	//Drive Controls (main controller: left motors on left joystick; right motors on right joystick)
 	motor[leftFrontMotor] = vexRT[Ch3];
 	motor[leftRear2] = vexRT[Ch3];
 	motor[rightFrontMotor] = vexRT[Ch2];
 	motor[rightRear2] = vexRT[Ch2];

	//Claw Controls (secondary controller: button 6U opens claw and 6D closes claw)
	if (vexRT[Btn6UXmtr2] == 1 && vexRT[Btn6DXmtr2] == 0)
	{
		motor[clawMotor] = fullSpeed;
	}
	else if (vexRT[Btn6DXmtr2] == 1 && vexRT[Btn6UXmtr2] == 0)
	{
		motor[clawMotor] = -fullSpeed;
	}
	else
	{
		motor[clawMotor] = 0;
	}

	//Mobile Goal Carrier Driver Control
	if (vexRT[Btn6D] == 1 && vexRT[Btn6U] == 0)
	{
		motor[leftMobileMotor] =fullSpeed;
		motor[rightMobileMotor] = fullSpeed;
	}
	else if (vexRT[Btn6U] == 1 && vexRT[Btn6D] == 0)
	{
		motor[leftMobileMotor] = -fullSpeed;
		motor[rightMobileMotor] = -fullSpeed;
	}
	else
	{
		motor[leftMobileMotor] = 0;
		motor[rightMobileMotor] = 0;
	}

	//Lift Controls (secondary controller; right joystick)
	motor[leftLiftMotor] = vexRT[Ch3Xmtr2];
	motor[rightLiftMotor] = vexRT[Ch3Xmtr2];
	}
}
